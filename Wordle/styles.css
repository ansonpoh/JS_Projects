*, *::after, *::before {
    box-sizing: border-box;
    font-family: Arial;
}

/* Using em and rem makes it responsive*/
body {
    background-color: hsl(240, 3%, 7%);
    min-height: 100vh;
    margin: 0;
    padding: 1em;
    display: flex;
    flex-direction: column;
    /* Size with em as everything scales with size of the font*/
    font-size: clamp(.5rem, 2.5vmin, 1.2rem);
}

.title{
    color: white;
    display: flex;
    justify-content: center;
    font-size: 2.5rem;
}

.keyboard {
    display: grid;
    /* 2 grids per letter*/
    grid-template-columns: repeat(20, minmax(auto, 2rem));
    grid-auto-rows: 3em;
    gap: 0.5em;
    justify-content: center;
}

.key {
    font-size: inherit;
    grid-column: span 2;
    border: none;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    /*allows for changing of specific hue/saturation/lightness without affecting the other properties */
    background-color: hsl(
        var(--hue, 200), 
        var(--saturation, 1%),
        calc(var(--lightness-offset, 0%) + var(--lightness, 51%)));
    color: white;
    fill: white;
    text-transform: uppercase;
    border-radius: 0.25em;
    cursor: pointer;
    user-select: none;
}

.key.large {
    grid-column: span 3;
}

.key > svg {
    width: 1.75em;
    height: 1.75em;
}

.key:hover, .key:focus {
    --lightness-offset: 10%;
}

.key.wrong {
    --lightness: 23%
}

.key.wrong-location {
    --hue: 49;
    --saturation: 51%;
    --lightness: 47%;
}

.key.correct {
    --hue: 119;
    --saturation: 29%;
    --lighness: 43%
}

.guessGrid {
    display: grid;
    justify-content: center;
    align-content: center;
    flex-grow: 1;
    grid-template-columns: repeat(5, 5em);
    grid-template-rows: repeat(6, 5em);
    gap: .25em;
    margin: 1em;
}

.tile {
    font-size: 2em;
    color: white;
    border: .05em solid hsl(240, 2%, 23%);
    text-transform: uppercase;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    user-select: none;
    transition: transform 250ms linear;
}

.tile[data-state="active"] {
    border-color: hsl(200, 1%, 34%);
}
  
.tile[data-state="wrong"] {
    border: none;
    background-color: hsl(240, 2%, 23%);
}
  
.tile[data-state="wrong-location"] {
    border: none;
    background-color: hsl(49, 51%, 47%);
}
  
.tile[data-state="correct"] {
    border: none;
    background-color: hsl(115, 29%, 43%);
}

.tile.shake {
    animation: shake 250ms ease-in-out;
}

.tile.dance {
    animation: dance 500ms ease-in-out;
}

.tile.flip {
    transform: rotateX(90deg);
}


.alert-container {
    position: fixed;
    top: 10vh;
    right: 50vw;
    transform: translateX(50%);
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.alert {
    pointer-events: none;
    background-color: hsl(204, 7%, 85%);
    padding: .75em;
    border-radius: .25em;
    opacity: 1;
    transition: opacity 500ms ease-in-out;
    margin-bottom: .5em;
    font-size: 1.5em;
}

.alert:last-child {
    margin-bottom: 0;
}

.alert.hide {
    opacity: 0;
}

.playagain-container {
    display: flex;
    justify-content: center;
    margin-top: 15vh;
}

.playAgain {
    margin-top: 1em;
    font-size: 2rem;
    cursor: pointer;
}

@keyframes shake {
    10% {
        transform: translateX(-5%)
    }
    30% {
        transform: translateX(5%)
    }
    50% {
        transform: translateX(-7.5%);
    }
    70%{   
         transform: translateX(7.5%);
    }
    90% {
        transform: translateX(-5%)
    }
    100%{
        transform: translateX(0);
    }
}

@keyframes dance {
    20% {
        transform: translateY(-50%)
    }
    40% {
        transform: translateY(5%)
    }
    60% {
        transform: translateY(-25%)
    }
    80% {
        transform: translateY(2.5%)
    }
    90% {
        transform: translateY(-5%)
    }
    100% {
        transform: translateY(0%)
    }
}
